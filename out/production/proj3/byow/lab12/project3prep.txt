Q: Can you think of an analogy between the process of tesselating hexagons and randomly generating a world using rooms and hallways? 
What is the hexagon and what is the tesselation on the Project 3 side?

A: The hexagon would be the randomized sizes of the rooms and hallways, but the tesselation would be connecting all the rooms and hallways,
leaving nothing unattended and disconnected.

-----
Q: If you were to start working on world generation, what kind of method would you think of writing first? 
Think back to the lab and the process used to eventually get to tesselating hexagons.

A: We would create methods that would calculate the lengths and widths of the rooms/hallways based on the randomized seeds inputted by
the user.

-----
Q: What distinguishes a hallway from a room? How are they similar?

A: A hallway is a segment (the hexagon) that's with a longer but narrow (literally only one space) space, whereas a room is of a
specific shape with more space (such as a rectangle or a different shape)

-----
Q: For tesselating hexagons, one of the hardest parts is figuring out where to place each hexagon/how to easily place hexagons on screen in an algorithmic way.
After looking at your own implemention, consider the implementation provided near the end of the lab.
How did your implementation differ from the given one? What lessons can be learned from it?

A: Doing a lot more helper functions like the lab asked us to do would help a lot in not making the whole thing a headache as specified in the specs.
We could definitely learn a thing from how simple that implementation came out to be.

-----
Q: Consider an algorithm for placing rooms and hallways on your map.
Ideally, consider many algorithms and think about what makes some easier or harder to implement. Try and bring those ideas together into a single simple algorithm which accomplishes the task.
In general, algorithms with as few edge cases as possible are better algorithms.

A: First, we could create the rooms with random width and height by surrounding them with the specified dimensions with walls.
It will probably be best to operate this on rectangular levels, despite different shapes. Then, we can connect with hallways,
and randomly decide if the next room should connect to the room before or after.
If any hallways are left, it will sprout from a random wall. We might do this on the go because we know for a fact that we only need num of rooms - 1 num of Hallways.
Hallways can be made from a path from one room to another. In regards to the specific implementation/approach, we don't know yet. But, the path will be floor.
We can surround with wall as we go if there are empty space.
Despite randomness, to make it work this way, we would have to have know when the rooms are close to each other, or find some way to connect them well.
Since it will all be connected either way, we think it will be best to connect as we go starting from a corner.
We could do path traversals with random edge weight with rooms as nodes, and we connect using one of the algorithms.
